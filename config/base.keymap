//╭─────────────╮   ╭─────────────┬───┬─────────────┬───┬─────────────┬───┬─────────────╮   ╭─────────────╮                                 ╭─────────────╮   ╭─────────────┬───┬─────────────┬───┬─────────────┬───┬─────────────╮   ╭─────────────╮
//├─────────────┤   ├─────────────┼───┼─────────────┼───┼─────────────┼───┼─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┼───┼─────────────┼───┼─────────────┼───┼─────────────┤   ├─────────────┤
//├─────────────┤   ├─────────────┼───┼─────────────┼───┼─────────────┼───┼─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┼───┼─────────────┼───┼─────────────┼───┼─────────────┤   ├─────────────┤
//├─────────────┤   ╰─────────────┴───┴─────────────┴───┴─────────────┴───┼─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┼───┴─────────────┴───┴─────────────┴───┴─────────────╯   ├─────────────┤
//├─────────────┼───┬─────────────┼───┬─────────────┬───┬─────────────╮   ├─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┤   ╭─────────────┬───┬─────────────┬───┼─────────────┬───┼─────────────┤
//╰─────────────┴───┴─────────────┴───┴─────────────┴───┴─────────────╯   ╰─────────────╯   ╰─────────────╯                                 ╰─────────────╯   ╰─────────────╯   ╰─────────────┴───┴─────────────┴───┴─────────────┴───┴─────────────╯
//                                                                        ╭─────────────┬───┬─────────────╮ ╭─────────────╮ ╭─────────────╮ ╭─────────────┬───┬─────────────╮
//                                                                        ╰─────────────┴───┴─────────────╯ ╰─────────────╯ ╰─────────────╯ ╰─────────────┴───┴─────────────╯

/*                     KEY POSITIONS
  ╭─────────────────────╮         ╭─────────────────────╮
  │ LT4 LT3 LT2 LT1 xxx │         │ xxx RT1 RT2 RT3 RT4 │
  │ LM4 LM3 LM2 LM1 xxx │         │ xxx RM1 RM2 RM3 RM4 │
  │ xxx xxx xxx LB1 xxx ╰───╮ ╭───╯ xxx RB1 xxx xxx xxx │
  ╰───────────╮ LH2 LH1 xxx │ │ xxx RH1 RH2 ╭───────────╯
              ╰─────────────╯ ╰─────────────╯          */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include "../zmk-nodefree-config/helper.h"

// 主层，与副层共同完成所有非功能性输入
#define DEF 0

// 副层，与主层共同完成所有非功能性输入
#define SEC 1

// 功能层，放置功能快捷键
#define FUN 2

// 测试层，放置测试快捷键
#define TMP 3

// 导航层，放置导航快捷键
#define NAV 4

// 控制层
#define BLU 5

//////////////////////////////
// Global Behaviors
//////////////////////////////

#define ___ &trans
#define _x_ &none
#define xxx &none

#define TAP_MS 200
#define SHORT_TAP_MS 165

// use require-prior-idle-ms for combos
#undef COMBO_HOOK
#define COMBO_HOOK require-prior-idle-ms = <200>;

#undef COMBO_TERM
#define COMBO_TERM 30

&lt {
    flavor = "balanced";
    tapping-term-ms = <TAP_MS>;
    quick-tap-ms = <TAP_MS>;
};

&mt {
    flavor = "balanced";
    tapping-term-ms = <TAP_MS>;
    quick-tap-ms = <TAP_MS>;
};

&sk {
    release-after-ms = <2500>;
    // quick-release;
};

#define MAKE_HRM(NAME, HOLD, TAP)         \
    ZMK_BEHAVIOR(NAME, hold_tap,          \
        flavor = "balanced";              \
        tapping-term-ms = <TAP_MS>;       \
        quick-tap-ms = <TAP_MS>;          \
        require-prior-idle-ms = <TAP_MS>; \
        bindings = <HOLD>, <TAP>;         \
    )
MAKE_HRM(hold_kp, &kp, &kp)
MAKE_HRM(hold_sk, &sk, &kp)

#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2) \
    ZMK_BEHAVIOR(NAME, mod_morph, \
        mods = <(MOD_L ## MOD|MOD_R ## MOD)>; \
        bindings = <BINDING1>, <BINDING2>; \
    )

ZMK_BEHAVIOR(_smart_grave, macro,
    bindings = <&kp GRAVE &kp GRAVE &kp LEFT>;
)
ZMK_BEHAVIOR(smart_grave, tap_dance,
    bindings = <&kp GRAVE>, <&_smart_grave>;
)

ZMK_BEHAVIOR(_smart_aps, macro,
    bindings = <&kp APOS &kp APOS &kp LEFT>;
)
ZMK_BEHAVIOR(smart_aps, tap_dance,
    bindings = <&kp APOS>, <&_smart_aps>;
)

ZMK_BEHAVIOR(_smart_par, macro,
    bindings = <&kp LPAR &kp RPAR &kp LEFT>;
)
ZMK_BEHAVIOR(smart_par, tap_dance,
    bindings = <&kp LPAR>, <&_smart_par>;
)

ZMK_BEHAVIOR(_smart_bkt, macro,
    bindings = <&kp LBKT &kp RBKT &kp LEFT>;
)
ZMK_BEHAVIOR(smart_bkt, tap_dance,
    bindings = <&kp LBKT>, <&_smart_bkt>;
)

ZMK_BEHAVIOR(_smart_brc, macro,
    bindings = <&kp LBRC &kp RBRC &kp LEFT>;
)
ZMK_BEHAVIOR(smart_brc, tap_dance,
    bindings = <&kp LBRC>, <&_smart_brc>;
)

ZMK_BEHAVIOR(_smart_thn, macro,
    bindings = <&kp LT &kp GT &kp LEFT>;
)
ZMK_BEHAVIOR(smart_thn, tap_dance,
    bindings = <&kp LT>, <&_smart_thn>;
)

// 左右终端 横向
SIMPLE_MORPH(esc_tab     , SFT , &kp ESC       , &kp TAB)    // Esc             / Tab
SIMPLE_MORPH(sw_lg       , SFT , &kp LC(SPACE) , &caps_word) // Switch Language / Caps Lock
SIMPLE_MORPH(bspc_del    , SFT , &kp BSPC      , &kp DEL)    // Backspace       / Delete
SIMPLE_MORPH(enter_ret   , SFT , &kp ENTER     , &kp RET2)   // Enter           / Return

// 左右终端 纵向
SIMPLE_MORPH(lpar_rpar   , SFT , &smart_par    , &kp RPAR)   // ( / )  / ()
SIMPLE_MORPH(lbkt_rbkt   , SFT , &smart_bkt    , &kp RBKT)   // [ / ]  / []
SIMPLE_MORPH(lbrc_rbrc   , SFT , &smart_brc    , &kp RBRC)   // { / }  / {}
SIMPLE_MORPH(lt_gt       , SFT , &smart_thn    , &kp GT)     // < / >  / <>

// 左手 横向
SIMPLE_MORPH(grave_tilde , SFT , &smart_grave  , &kp TILDE)  // ` / ~  / ``
SIMPLE_MORPH(aps_quot    , SFT , &smart_aps , &kp LS(APOS))  // ' / "  / ''
SIMPLE_MORPH(dllr_caret  , SFT , &kp DLLR      , &kp CARET)  // $ / ^
SIMPLE_MORPH(amper_pipe  , SFT , &kp AMPS      , &kp PIPE)   // & / |

// 右手 横向
SIMPLE_MORPH(under_equal , SFT , &kp UNDER     , &kp EQUAL)  // _ / =
SIMPLE_MORPH(excl_qmark  , SFT , &kp EXCL      , &kp QMARK)  // ! / ?
SIMPLE_MORPH(comma_semi  , SFT , &kp COMMA     , &kp SEMI)   // , / ;
SIMPLE_MORPH(dot_colon   , SFT , &kp DOT       , &kp COLON)  // . / :

// SIMPLE_MORPH(minus_plus  , SFT , &kp MINUS     , &kp PLUS)   // - / +
// SIMPLE_MORPH(fslh_star   , SFT , &kp FSLH      , &kp STAR)   // / / *
// \
// @
// #
// %

//////////////////////////////
// ---------- DEF ----------
//////////////////////////////

////////////////////
// "\" combos
////////////////////

// left hand

// ZMK_COMBO(_     , &kp 0              , LT4 LM4 , DEF , COMBO_TERM)
ZMK_COMBO(x     , &kp X              , LT3 LM3 , DEF , COMBO_TERM)
ZMK_COMBO(c     , &kp C              , LT2 LM2 , DEF , COMBO_TERM)
// ZMK_COMBO(_     , &kp 0              , LT1 LM1 , DEF , COMBO_TERM)
// ZMK_COMBO(_     , &kp 0              , LM1 LB1 , DEF , COMBO_TERM)

// right hand

// ZMK_COMBO(_     , &kp 0              , RM1 RB1 , DEF , COMBO_TERM)
ZMK_COMBO(par   , &lpar_rpar         , RT1 RM1 , DEF , COMBO_TERM)
ZMK_COMBO(bkt   , &lbkt_rbkt         , RT2 RM2 , DEF , COMBO_TERM)
ZMK_COMBO(brc   , &lbrc_rbrc         , RT3 RM3 , DEF , COMBO_TERM)
ZMK_COMBO(than  , &lt_gt             , RT4 RM4 , DEF , COMBO_TERM)

////////////////////
// "-" combos
////////////////////

// left hand

ZMK_COMBO(et    , &esc_tab           , LT4 LT3 , DEF , COMBO_TERM)
ZMK_COMBO(sl    , &sw_lg             , LM4 LM3 , DEF , COMBO_TERM)

ZMK_COMBO(gt    , &grave_tilde       , LT3 LT2 , DEF , COMBO_TERM)
ZMK_COMBO(aq    , &aps_quot          , LM3 LM2 , DEF , COMBO_TERM)

ZMK_COMBO(dc1   , &dllr_caret        , LT2 LT1 , DEF , COMBO_TERM)
ZMK_COMBO(ap    , &amper_pipe        , LM2 LM1 , DEF , COMBO_TERM)

// right hand

ZMK_COMBO(ue    , &under_equal       , RT1 RT2 , DEF , COMBO_TERM)
ZMK_COMBO(eq    , &excl_qmark        , RM1 RM2 , DEF , COMBO_TERM)

ZMK_COMBO(cs    , &comma_semi        , RT2 RT3 , DEF , COMBO_TERM)
ZMK_COMBO(dc2   , &dot_colon         , RM2 RM3 , DEF , COMBO_TERM)

ZMK_COMBO(bd    , &bspc_del          , RT3 RT4 , DEF , COMBO_TERM)
ZMK_COMBO(er    , &enter_ret         , RM3 RM4 , DEF , COMBO_TERM)

ZMK_LAYER(DEF,
//╭─────────────╮   ╭─────────────┬───┬─────────────┬───┬─────────────┬───┬─────────────╮   ╭─────────────╮                                 ╭─────────────╮   ╭─────────────┬───┬─────────────┬───┬─────────────┬───┬─────────────╮   ╭─────────────╮
   xxx               &kp Q             &kp W             &kp E             &kp R             xxx                                             xxx               &kp U             &kp I             &kp O             &kp P             xxx
//                              Esc / Tab           ` / ~             $ / ^                                                                                                 _ / =             , / ;     Backspace / Delete
//├─────────────┤   ├─────────────┼───┼─────────────┼───┼─────────────┼───┼─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┼───┼─────────────┼───┼─────────────┼───┼─────────────┤   ├─────────────┤
//                        _x_                X                 C                _x_                                                                                 ( / )             [ / ]              { / }             < / >
//├─────────────┤   ├─────────────┼───┼─────────────┼───┼─────────────┼───┼─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┼───┼─────────────┼───┼─────────────┼───┼─────────────┤   ├─────────────┤
   xxx               &hold_sk LGUI A   &hold_sk LALT S   &hold_sk LCTRL D  &hold_sk LSHFT F  &kp T                                           &kp Y             &hold_sk LSHFT J  &kp K             &kp L             &hold_kp LA(Z) Z  xxx
//                  Switch Language / Caps Lock     ' / "             & / |                                                                                                 ! / ?             . / :              RET
//├─────────────┤   ╰─────────────┴───┴─────────────┴───┴─────────────┴───┼─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┼───┴─────────────┴───┴─────────────┴───┴─────────────╯   ├─────────────┤
//                                                                              _x_                                                                                 _x_
//├─────────────┼───┬─────────────┼───┬─────────────┬───┬─────────────╮   ├─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┤   ╭─────────────┬───┬─────────────┬───┼─────────────┬───┼─────────────┤
   xxx               xxx               xxx               xxx              &hold_kp LA(V) V   &kp G                                           xxx               &kp H             xxx               xxx               xxx               xxx
//╰─────────────┴───┴─────────────┴───┴─────────────┴───┴─────────────╯   ╰─────────────╯   ╰─────────────╯                                 ╰─────────────╯   ╰─────────────╯   ╰─────────────┴───┴─────────────┴───┴─────────────┴───┴─────────────╯
//                                                                        ╭─────────────┬───┬─────────────╮ ╭─────────────╮ ╭─────────────╮ ╭─────────────┬───┬─────────────╮
                                                                           &lt SEC SPACE     &lt FUN B       xxx             xxx             &lt TMP N         &lt NAV M
//                                                                        ╰─────────────┴───┴─────────────╯ ╰─────────────╯ ╰─────────────╯ ╰─────────────┴───┴─────────────╯
)

//////////////////////////////
// ---------- SEC ----------
//////////////////////////////

// ZMK_BEHAVIOR(smart_0, mod_morph,
//     bindings = <&kp N0>, <&kp 0>;
//     mods = <(MOD_LSFT)>;
// )
// ZMK_BEHAVIOR(smart_1, mod_morph,
//     bindings = <&kp N1>, <&kp F1>;
//     mods = <(MOD_LSFT)>;
// )
// ZMK_BEHAVIOR(smart_2, mod_morph,
//     bindings = <&kp N2>, <&kp F2>;
//     mods = <(MOD_LSFT)>;
// )
// ZMK_BEHAVIOR(smart_3, mod_morph,
//     bindings = <&kp N3>, <&kp F3>;
//     mods = <(MOD_LSFT)>;
// )
// ZMK_BEHAVIOR(smart_4, mod_morph,
//     bindings = <&kp N4>, <&kp F4>;
//     mods = <(MOD_LSFT)>;
// )
// ZMK_BEHAVIOR(smart_5, mod_morph,
//     bindings = <&kp N5>, <&kp F5>;
//     mods = <(MOD_LSFT)>;
// )
// ZMK_BEHAVIOR(smart_6, mod_morph,
//     bindings = <&kp N6>, <&kp F6>;
//     mods = <(MOD_LSFT)>;
// )
// ZMK_BEHAVIOR(smart_7, mod_morph,
//     bindings = <&kp N7>, <&kp F7>;
//     mods = <(MOD_LSFT)>;
// )
// ZMK_BEHAVIOR(smart_8, mod_morph,
//     bindings = <&kp N8>, <&kp F8>;
//     mods = <(MOD_LSFT)>;
// )
// ZMK_BEHAVIOR(smart_9, mod_morph,
//     bindings = <&kp N9>, <&kp F9>;
//     mods = <(MOD_LSFT)>;
// )

////////////////////
// "\" combos
////////////////////

// left hand

// ZMK_COMBO(_     , &kp 0              , LT4 LM4 , SEC , COMBO_TERM)
// ZMK_COMBO(_     , &kp 0              , LT3 LM3 , SEC , COMBO_TERM)
// ZMK_COMBO(_     , &kp 0              , LT2 LM2 , SEC , COMBO_TERM)
// ZMK_COMBO(_     , &kp 0              , LT1 LM1 , SEC , COMBO_TERM)

// ZMK_COMBO(_     , &kp 0              , LM1 LB1 , SEC , COMBO_TERM)

// right hand

// ZMK_COMBO(_     , &kp 0              , RM1 RB1 , SEC , COMBO_TERM)

// ZMK_COMBO(_     , &kp 0              , RT1 RM1 , SEC , COMBO_TERM)
// ZMK_COMBO(_     , &kp 0              , RT2 RM2 , SEC , COMBO_TERM)
// ZMK_COMBO(_     , &kp 0              , RT3 RM3 , SEC , COMBO_TERM)
// ZMK_COMBO(_     , &kp 0              , RT4 RM4 , SEC , COMBO_TERM)

////////////////////
// "-" combos
////////////////////

// left hand

// ZMK_COMBO(_     , &kp 0              , LT4 LT3 , SEC , COMBO_TERM)
// ZMK_COMBO(_     , &kp 0              , LM4 LM3 , SEC , COMBO_TERM)

// ZMK_COMBO(_     , &kp 0              , LT3 LT2 , SEC , COMBO_TERM)
// ZMK_COMBO(_     , &kp 0              , LM3 LM2 , SEC , COMBO_TERM)

// ZMK_COMBO(_     , &kp 0              , LT2 LT1 , SEC , COMBO_TERM)
// ZMK_COMBO(_     , &kp 0              , LM2 LM1 , SEC , COMBO_TERM)

// right hand

// ZMK_COMBO(_     , &kp 0              , RT1 RT2 , SEC , COMBO_TERM)
// ZMK_COMBO(_     , &kp 0              , RM1 RM2 , SEC , COMBO_TERM)

// ZMK_COMBO(_     , &kp 0              , RT2 RT3 , SEC , COMBO_TERM)
// ZMK_COMBO(_     , &kp 0              , RM2 RM3 , SEC , COMBO_TERM)

// ZMK_COMBO(_     , &kp 0              , RT3 RT4 , SEC , COMBO_TERM)
// ZMK_COMBO(_     , &kp 0              , RM3 RM4 , SEC , COMBO_TERM)

ZMK_LAYER(SEC,
//╭─────────────╮   ╭─────────────┬───┬─────────────┬───┬─────────────┬───┬─────────────╮   ╭─────────────╮                                 ╭─────────────╮   ╭─────────────┬───┬─────────────┬───┬─────────────┬───┬─────────────╮   ╭─────────────╮
   xxx               &kp PLUS          &kp MINUS         &kp STAR          &kp FSLH          xxx                                             xxx               &kp AT            &kp HASH          &kp PRCNT         &kp BSLH          xxx
//├─────────────┤   ├─────────────┼───┼─────────────┼───┼─────────────┼───┼─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┼───┼─────────────┼───┼─────────────┼───┼─────────────┤   ├─────────────┤
//├─────────────┤   ├─────────────┼───┼─────────────┼───┼─────────────┼───┼─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┼───┼─────────────┼───┼─────────────┼───┼─────────────┤   ├─────────────┤
   xxx               &kp N1            &kp N2            &kp N3            &hold_sk LSHFT N4 xxx                                             xxx               &hold_sk LSHFT N7 &kp N8            &kp N9            &kp N0            xxx
//├─────────────┤   ╰─────────────┴───┴─────────────┴───┴─────────────┴───┼─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┼───┴─────────────┴───┴─────────────┴───┴─────────────╯   ├─────────────┤
//├─────────────┼───┬─────────────┼───┬─────────────┬───┬─────────────╮   ├─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┤   ╭─────────────┬───┬─────────────┬───┼─────────────┬───┼─────────────┤
   xxx               xxx               xxx               xxx               &kp N5            xxx                                             xxx               &kp N6            xxx               xxx               xxx               xxx
//╰─────────────┴───┴─────────────┴───┴─────────────┴───┴─────────────╯   ╰─────────────╯   ╰─────────────╯                                 ╰─────────────╯   ╰─────────────╯   ╰─────────────┴───┴─────────────┴───┴─────────────┴───┴─────────────╯
//                                                                        ╭─────────────┬───┬─────────────╮ ╭─────────────╮ ╭─────────────╮ ╭─────────────┬───┬─────────────╮
                                                                           _x_               ___             xxx             xxx             ___               ___
//                                                                        ╰─────────────┴───┴─────────────╯ ╰─────────────╯ ╰─────────────╯ ╰─────────────┴───┴─────────────╯
)

//////////////////////////////
// ---------- FUN ----------
//////////////////////////////

// #define _COPY &kp LG(C)
// #define _CUT &kp LG(X)
// ZMK_BEHAVIOR(copy_cut, tap_dance,
//     tapping-term-ms = <SHORT_TAP_MS>;
//     bindings = <_COPY>, <_CUT>;
// )
// #define _COPY_CUT &kp LG(X)
//
// #define _PASTE &kp LG(V)
//
// #define _UNDO &kp LG(Z)
// #define _REDO &kp LG(LS(Z))
// ZMK_BEHAVIOR(undo_redo, tap_dance,
//     tapping-term-ms = <SHORT_TAP_MS>;
//     bindings = <_UNDO>, <_REDO>;
// )

SIMPLE_MORPH(vol_prev_pp, SFT, &kp C_PREV, &kp C_PP)
SIMPLE_MORPH(vol_dn_mute, SFT, &kp C_VOL_DN, &kp C_MUTE)

MAKE_HRM(hold_prev_pp, &sk, &vol_prev_pp)

ZMK_LAYER(FUN,
//╭─────────────╮   ╭─────────────┬───┬─────────────┬───┬─────────────┬───┬─────────────╮   ╭─────────────╮                                 ╭─────────────╮   ╭─────────────┬───┬─────────────┬───┬─────────────┬───┬─────────────╮   ╭─────────────╮
   xxx               &kp LG(LS(SPACE)) _x_               _x_               _x_               xxx                                             xxx               &kp C_NEXT        &kp C_VOL_UP      &kp C_BRI_UP      &kp LG(LC(Q))     xxx
//├─────────────┤   ├─────────────┼───┼─────────────┼───┼─────────────┼───┼─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┼───┼─────────────┼───┼─────────────┼───┼─────────────┤   ├─────────────┤
//├─────────────┤   ├─────────────┼───┼─────────────┼───┼─────────────┼───┼─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┼───┼─────────────┼───┼─────────────┼───┼─────────────┤   ├─────────────┤
   xxx               _x_               _x_               _x_        &hold_sk LSHFT LG(LS(F)) xxx                                             xxx          &hold_prev_pp LSHFT 0  &vol_dn_mute      &kp C_BRI_DN      _x_               xxx
//├─────────────┤   ╰─────────────┴───┴─────────────┴───┴─────────────┴───┼─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┼───┴─────────────┴───┴─────────────┴───┴─────────────╯   ├─────────────┤
//├─────────────┼───┬─────────────┼───┬─────────────┬───┬─────────────╮   ├─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┤   ╭─────────────┬───┬─────────────┬───┼─────────────┬───┼─────────────┤
   xxx               xxx               xxx               xxx               &kp LG(LS(C))     xxx                                             xxx               _x_               xxx               xxx               xxx               xxx
//╰─────────────┴───┴─────────────┴───┴─────────────┴───┴─────────────╯   ╰─────────────╯   ╰─────────────╯                                 ╰─────────────╯   ╰─────────────╯   ╰─────────────┴───┴─────────────┴───┴─────────────┴───┴─────────────╯
//                                                                        ╭─────────────┬───┬─────────────╮ ╭─────────────╮ ╭─────────────╮ ╭─────────────┬───┬─────────────╮
                                                                           ___               _x_             xxx             xxx             ___               ___
//                                                                        ╰─────────────┴───┴─────────────╯ ╰─────────────╯ ╰─────────────╯ ╰─────────────┴───┴─────────────╯
)

//////////////////////////////
// ---------- TMP ----------
//////////////////////////////

ZMK_LAYER(TMP,
//╭─────────────╮   ╭─────────────┬───┬─────────────┬───┬─────────────┬───┬─────────────╮   ╭─────────────╮                                 ╭─────────────╮   ╭─────────────┬───┬─────────────┬───┬─────────────┬───┬─────────────╮   ╭─────────────╮
   xxx               &kp K_APP         _x_               _x_               _x_               xxx                                             xxx               _x_               _x_               _x_               _x_               xxx
//├─────────────┤   ├─────────────┼───┼─────────────┼───┼─────────────┼───┼─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┼───┼─────────────┼───┼─────────────┼───┼─────────────┤   ├─────────────┤
//├─────────────┤   ├─────────────┼───┼─────────────┼───┼─────────────┼───┼─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┼───┼─────────────┼───┼─────────────┼───┼─────────────┤   ├─────────────┤
   xxx               _x_               _x_               _x_               &sk LSHFT         xxx                                             xxx               &sk LSHFT         _x_               _x_               _x_               xxx
//├─────────────┤   ╰─────────────┴───┴─────────────┴───┴─────────────┴───┼─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┼───┴─────────────┴───┴─────────────┴───┴─────────────╯   ├─────────────┤
//├─────────────┼───┬─────────────┼───┬─────────────┬───┬─────────────╮   ├─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┤   ╭─────────────┬───┬─────────────┬───┼─────────────┬───┼─────────────┤
   xxx               xxx               xxx               xxx               _x_               xxx                                             xxx               _x_               xxx               xxx               xxx               xxx
//╰─────────────┴───┴─────────────┴───┴─────────────┴───┴─────────────╯   ╰─────────────╯   ╰─────────────╯                                 ╰─────────────╯   ╰─────────────╯   ╰─────────────┴───┴─────────────┴───┴─────────────┴───┴─────────────╯
//                                                                        ╭─────────────┬───┬─────────────╮ ╭─────────────╮ ╭─────────────╮ ╭─────────────┬───┬─────────────╮
                                                                           ___               ___             xxx             xxx             _x_               ___
//                                                                        ╰─────────────┴───┴─────────────╯ ╰─────────────╯ ╰─────────────╯ ╰─────────────┴───┴─────────────╯
)

//////////////////////////////
// ---------- NAV ----------
//////////////////////////////

SIMPLE_MORPH(left_home  , SFT , &kp LEFT  , &kp HOME)
SIMPLE_MORPH(down_pg_dn , SFT , &kp DOWN  , &kp PG_DN)
SIMPLE_MORPH(up_pg_up   , SFT , &kp UP    , &kp PG_UP)
SIMPLE_MORPH(right_end  , SFT , &kp RIGHT , &kp END)

MAKE_HRM(hold_down_pg_dn, &sk, &down_pg_dn)

ZMK_LAYER(NAV,
//╭─────────────╮   ╭─────────────┬───┬─────────────┬───┬─────────────┬───┬─────────────╮   ╭─────────────╮                                 ╭─────────────╮   ╭─────────────┬───┬─────────────┬───┬─────────────┬───┬─────────────╮   ╭─────────────╮
   xxx               _x_               _x_               _x_               _x_               xxx                                             xxx               _x_               _x_               _x_               _x_               xxx
//├─────────────┤   ├─────────────┼───┼─────────────┼───┼─────────────┼───┼─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┼───┼─────────────┼───┼─────────────┼───┼─────────────┤   ├─────────────┤
//├─────────────┤   ├─────────────┼───┼─────────────┼───┼─────────────┼───┼─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┼───┼─────────────┼───┼─────────────┼───┼─────────────┤   ├─────────────┤
   xxx               _x_               _x_               _x_               &sk LSHFT         xxx                                             xxx               &down_pg_dn       &up_pg_up         &right_end        _x_               xxx
//├─────────────┤   ╰─────────────┴───┴─────────────┴───┴─────────────┴───┼─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┼───┴─────────────┴───┴─────────────┴───┴─────────────╯   ├─────────────┤
//├─────────────┼───┬─────────────┼───┬─────────────┬───┬─────────────╮   ├─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┤   ╭─────────────┬───┬─────────────┬───┼─────────────┬───┼─────────────┤
   xxx               xxx               xxx               xxx               _x_               xxx                                             xxx               &left_home        xxx               xxx               xxx               xxx
//╰─────────────┴───┴─────────────┴───┴─────────────┴───┴─────────────╯   ╰─────────────╯   ╰─────────────╯                                 ╰─────────────╯   ╰─────────────╯   ╰─────────────┴───┴─────────────┴───┴─────────────┴───┴─────────────╯
//                                                                        ╭─────────────┬───┬─────────────╮ ╭─────────────╮ ╭─────────────╮ ╭─────────────┬───┬─────────────╮
                                                                           ___               ___             xxx             xxx             ___               _x_
//                                                                        ╰─────────────┴───┴─────────────╯ ╰─────────────╯ ╰─────────────╯ ╰─────────────┴───┴─────────────╯
)

//////////////////////////////
// ---------- BLU ----------
//////////////////////////////

#if CONFIG_WIRELESS

#include <dt-bindings/zmk/bt.h>

ZMK_CONDITIONAL_LAYER(FUN TMP, BLU)

ZMK_LAYER(BLU,
//╭─────────────╮   ╭─────────────┬───┬─────────────┬───┬─────────────┬───┬─────────────╮   ╭─────────────╮                                 ╭─────────────╮   ╭─────────────┬───┬─────────────┬───┬─────────────┬───┬─────────────╮   ╭─────────────╮
   xxx               &sys_reset        &bt BT_CLR        _x_               &bootloader       xxx                                             xxx               &bootloader       _x_               &bt BT_CLR        &sys_reset        xxx
//├─────────────┤   ├─────────────┼───┼─────────────┼───┼─────────────┼───┼─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┼───┼─────────────┼───┼─────────────┼───┼─────────────┤   ├─────────────┤
//├─────────────┤   ├─────────────┼───┼─────────────┼───┼─────────────┼───┼─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┼───┼─────────────┼───┼─────────────┼───┼─────────────┤   ├─────────────┤
   xxx               &bt BT_SEL 1      &bt BT_SEL 2      &bt BT_SEL 3      &bt BT_SEL 4      xxx                                             xxx               &bt BT_SEL 7      &bt BT_SEL 8      &bt BT_SEL 9      &bt BT_SEL 0      xxx
//├─────────────┤   ╰─────────────┴───┴─────────────┴───┴─────────────┴───┼─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┼───┴─────────────┴───┴─────────────┴───┴─────────────╯   ├─────────────┤
//├─────────────┼───┬─────────────┼───┬─────────────┬───┬─────────────╮   ├─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┤   ╭─────────────┬───┬─────────────┬───┼─────────────┬───┼─────────────┤
   xxx               xxx               xxx               xxx               &bt BT_SEL 5      xxx                                             xxx               &bt BT_SEL 6      xxx               xxx               xxx               xxx
//╰─────────────┴───┴─────────────┴───┴─────────────┴───┴─────────────╯   ╰─────────────╯   ╰─────────────╯                                 ╰─────────────╯   ╰─────────────╯   ╰─────────────┴───┴─────────────┴───┴─────────────┴───┴─────────────╯
//                                                                        ╭─────────────┬───┬─────────────╮ ╭─────────────╮ ╭─────────────╮ ╭─────────────┬───┬─────────────╮
                                                                           ___               ___             xxx             xxx             ___               ___
//                                                                        ╰─────────────┴───┴─────────────╯ ╰─────────────╯ ╰─────────────╯ ╰─────────────┴───┴─────────────╯
)

#else

ZMK_LAYER(BLU,
//╭─────────────╮   ╭─────────────┬───┬─────────────┬───┬─────────────┬───┬─────────────╮   ╭─────────────╮                                 ╭─────────────╮   ╭─────────────┬───┬─────────────┬───┬─────────────┬───┬─────────────╮   ╭─────────────╮
   xxx               &sys_reset        &bt BT_CLR        _x_               &bootloader       xxx                                             xxx               &bootloader       _x_               &bt BT_CLR        &sys_reset        xxx
//├─────────────┤   ├─────────────┼───┼─────────────┼───┼─────────────┼───┼─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┼───┼─────────────┼───┼─────────────┼───┼─────────────┤   ├─────────────┤
//├─────────────┤   ├─────────────┼───┼─────────────┼───┼─────────────┼───┼─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┼───┼─────────────┼───┼─────────────┼───┼─────────────┤   ├─────────────┤
   xxx               _x_               _x_               _x_               _x_               xxx                                             xxx               _x_               _x_               _x_               _x_               xxx
//├─────────────┤   ╰─────────────┴───┴─────────────┴───┴─────────────┴───┼─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┼───┴─────────────┴───┴─────────────┴───┴─────────────╯   ├─────────────┤
//├─────────────┼───┬─────────────┼───┬─────────────┬───┬─────────────╮   ├─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┤   ╭─────────────┬───┬─────────────┬───┼─────────────┬───┼─────────────┤
   xxx               xxx               xxx               xxx               _x_               xxx                                             xxx               _x_               xxx               xxx               xxx               xxx
//╰─────────────┴───┴─────────────┴───┴─────────────┴───┴─────────────╯   ╰─────────────╯   ╰─────────────╯                                 ╰─────────────╯   ╰─────────────╯   ╰─────────────┴───┴─────────────┴───┴─────────────┴───┴─────────────╯
//                                                                        ╭─────────────┬───┬─────────────╮ ╭─────────────╮ ╭─────────────╮ ╭─────────────┬───┬─────────────╮
                                                                           ___               ___             xxx             xxx             ___               ___
//                                                                        ╰─────────────┴───┴─────────────╯ ╰─────────────╯ ╰─────────────╯ ╰─────────────┴───┴─────────────╯
)

#endif
