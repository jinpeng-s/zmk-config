//╭─────────────┬───┬─────────────╮   ╭─────────────┬───┬─────────────╮   ╭─────────────┬───┬─────────────╮                                 ╭─────────────┬───┬─────────────╮   ╭─────────────┬───┬─────────────╮   ╭─────────────┬───┬─────────────╮
//├─────────────┼───┴─────────────╯   ├─────────────┼───┼─────────────┤   ╰─────────────┴───┼─────────────┤                                 ├─────────────┼───┴─────────────╯   ├─────────────┼───┼─────────────┤   ╰─────────────┴───┼─────────────┤
//├─────────────┤   ╭─────────────┬───┼─────────────┼───┼─────────────┼───┬─────────────╮   ├─────────────┤                                 ├─────────────┤   ╭─────────────┬───┼─────────────┼───┼─────────────┼───┬─────────────╮   ├─────────────┤
//├─────────────┤   ╰─────────────┴───┴─────────────┴───┴─────────────┴───┼─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┼───┴─────────────┴───┴─────────────┴───┴─────────────╯   ├─────────────┤
//├─────────────┼───┬─────────────┬───┬─────────────┬───┬─────────────╮   ├─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┤   ╭─────────────┬───┬─────────────┬───┬─────────────┬───┼─────────────┤
//╰─────────────┴───┴─────────────┴───┴─────────────┴───┴─────────────╯   ╰─────────────╯   ╰─────────────╯                                 ╰─────────────╯   ╰─────────────╯   ╰─────────────┴───┴─────────────┴───┴─────────────┴───┴─────────────╯
//                                                                        ╭─────────────┬───┬─────────────╮ ╭─────────────────────────────╮ ╭─────────────┬───┬─────────────╮
//                                                                        ╰─────────────┴───┴─────────────╯ ╰─────────────────────────────╯ ╰─────────────┴───┴─────────────╯

/*                     KEY POSITIONS
  ╭─────────────────────╮         ╭─────────────────────╮
  │ xxx LT3 LT2 xxx xxx │         │ xxx xxx RT2 RT3 xxx │
  │ LM4 LM3 LM2 LM1 xxx │         │ xxx RM1 RM2 RM3 RM4 │
  │ xxx xxx xxx LB1 xxx ╰───╮ ╭───╯ xxx RB1 xxx xxx xxx │
  ╰───────────╮ LH1 LH0 xxx │ │ xxx RH0 RH1 ╭───────────╯
              ╰─────────────╯ ╰─────────────╯          */

// NOTE:
// 1. Use double tap instead of modify tap
// 2. Use sticky key instead of hold key
// 3. Never use two finger to type a single key

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include "../../../zmk-nodefree-config/helper.h"

//////////////////////////////
// Global Behavior
//////////////////////////////

// unused
#define _x_          &none
// abandoned
#define xxx          &none
// DO NOT HAVE
#define DNH          &none

#define ___          &trans
#define TAP_MS       200
#define SHORT_TAP_MS 165

&sl {
    release-after-ms = <5000>;
    // quick-release;
};

&sk {
    release-after-ms = <5000>;
    // quick-release;
};

#define TAP_TAP(                                          \
    NAME       ,                                          \
    TAP_ACT    , TAP    ,                                 \
    TAPTAP_ACT , TAPTAP                                   \
    )                                                     \
    ZMK_BEHAVIOR(                                         \
        NAME,                                             \
        tap_dance,                                        \
        tapping-term-ms = <TAP_MS>;                       \
        bindings = <&TAP_ACT TAP> , <&TAPTAP_ACT TAPTAP>; \
    )

#define MAKE_HRM(                         \
    NAME ,                                \
    HOLD , TAP                            \
    )                                     \
    ZMK_BEHAVIOR(                         \
        NAME,                             \
        hold_tap,                         \
        flavor = "balanced";              \
        tapping-term-ms = <TAP_MS>;       \
        quick-tap-ms = <TAP_MS>;          \
        require-prior-idle-ms = <TAP_MS>; \
        bindings = <HOLD>, <TAP>;         \
    )
MAKE_HRM(hold_sk, &sk, &kp)

//////////////////////////////
// Layer Definition
//////////////////////////////

// 主副层，放置非功能键
#define DEF 0
#define NUM 1

// 零时层, 放置临时快捷键
#define FOO 2
#define BAR 3

// 功能层，放置功能快捷键
#define FUN 4

// 控制层
#define BLU 5

//////////////////////////////
// DEF
//////////////////////////////

// //      NAME        , TAP_ACT , TAP      , TAPTAP_ACT , TAPTAP
// TAP_TAP(a           , kp      , A        , kp         , LS(A)  ) // a / A
// TAP_TAP(b           , kp      , B        , kp         , LS(B)  ) // b / B
// TAP_TAP(c           , kp      , C        , kp         , LS(C)  ) // c / C
// TAP_TAP(d           , kp      , D        , kp         , LS(D)  ) // d / D
// TAP_TAP(e           , kp      , E        , kp         , LS(E)  ) // e / E
// TAP_TAP(f           , kp      , F        , kp         , LS(F)  ) // f / F
// TAP_TAP(g           , kp      , G        , kp         , LS(G)  ) // g / G
// TAP_TAP(h           , kp      , H        , kp         , LS(H)  ) // h / H
// TAP_TAP(i           , kp      , I        , kp         , LS(I)  ) // i / I
// TAP_TAP(j           , kp      , J        , kp         , LS(J)  ) // j / J
// TAP_TAP(k           , kp      , K        , kp         , LS(K)  ) // k / K
// TAP_TAP(l           , kp      , L        , kp         , LS(L)  ) // l / L
// TAP_TAP(m           , kp      , M        , kp         , LS(M)  ) // m / M
// TAP_TAP(n           , kp      , N        , kp         , LS(N)  ) // n / N
// TAP_TAP(o           , kp      , O        , kp         , LS(O)  ) // o / O
// TAP_TAP(p           , kp      , P        , kp         , LS(P)  ) // p / P
// TAP_TAP(q           , kp      , Q        , kp         , LS(Q)  ) // q / Q
// TAP_TAP(r           , kp      , R        , kp         , LS(R)  ) // r / R
// TAP_TAP(s           , kp      , S        , kp         , LS(S)  ) // s / S
// TAP_TAP(t           , kp      , T        , kp         , LS(T)  ) // t / T
// TAP_TAP(u           , kp      , U        , kp         , LS(U)  ) // u / U
// TAP_TAP(v           , kp      , V        , kp         , LS(V)  ) // v / V
// TAP_TAP(w           , kp      , W        , kp         , LS(W)  ) // w / W
// TAP_TAP(x           , kp      , X        , kp         , LS(X)  ) // x / X
// TAP_TAP(y           , kp      , Y        , kp         , LS(Y)  ) // y / Y
// TAP_TAP(z           , kp      , Z        , kp         , LS(Z)  ) // z / Z
// TAP_TAP(space       , kp      , SPACE    , kp         , 0      )

////////////////////
// combos
////////////////////

ZMK_COMBO(esc         , &kp ESC             , LT3 LT2 , DEF, COMBO_TERM)
ZMK_COMBO(tab         , &kp TAB             , LM3 LM2 , DEF, COMBO_TERM)
ZMK_COMBO(bspc        , &kp BSPC            , RT2 RT3 , DEF, COMBO_TERM)
ZMK_COMBO(enter       , &kp ENTER           , RM2 RM3 , DEF, COMBO_TERM)

//////////

ZMK_COMBO(0           , &kp 0               , LT3 LM3 , DEF , COMBO_TERM)
ZMK_COMBO(0           , &kp 0               , LT2 LM2 , DEF , COMBO_TERM)
ZMK_COMBO(0           , &kp 0               , RT2 RM2 , DEF , COMBO_TERM)
ZMK_COMBO(0           , &kp 0               , RT3 RM3 , DEF , COMBO_TERM)

ZMK_COMBO(g           , &kp G               , LM1 LB1 , DEF , COMBO_TERM)
ZMK_COMBO(b           , &kp B               , RM1 RB1 , DEF , COMBO_TERM)

ZMK_COMBO(0           , &kp 0               , LH1 LH0 , DEF , COMBO_TERM)
ZMK_COMBO(0           , &kp 0               , RH0 RH1 , DEF , COMBO_TERM)

////////////////////

ZMK_LAYER(DEF,
//╭─────────────┬───┬─────────────╮   ╭─────────────┬───┬─────────────╮   ╭─────────────┬───┬─────────────╮                                 ╭─────────────┬───┬─────────────╮   ╭─────────────┬───┬─────────────╮   ╭─────────────┬───┬─────────────╮
                     &kp Q             &kp W             &kp E             &kp R             xxx                                             &kp Y             &kp U             &kp I             &kp O             &kp P                
//                                                   Esc                                                                                                                                    Backspace
//├─────────────┼───┴─────────────╯   ├─────────────┼───┼─────────────┤   ╰─────────────┴───┼─────────────┤                                 ├─────────────┼───┴─────────────╯   ├─────────────┼───┼─────────────┤   ╰─────────────┴───┼─────────────┤
//                                          _x_               _x_                                                                                                                     _x_               _x_
//├─────────────┤   ╭─────────────┬───┼─────────────┼───┼─────────────┼───┬─────────────╮   ├─────────────┤                                 ├─────────────┤   ╭─────────────┬───┼─────────────┼───┼─────────────┼───┬─────────────╮   ├─────────────┤
                     &hold_sk LGUI A   &hold_sk LALT S   &hold_sk LCTRL D  &hold_sk LSHFT F  xxx                                             xxx               &hold_sk LSHFT T  &hold_sk LCTRL K  &hold_sk LALT L   &hold_sk LGUI J      
//                                                   TAB                                                                                                                                      Return
//├─────────────┤   ╰─────────────┴───┴─────────────┴───┴─────────────┴───┼─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┼───┴─────────────┴───┴─────────────┴───┴─────────────╯   ├─────────────┤
//                                                                              _x_                                                                                  B
//├─────────────┼───┬─────────────┬───┬─────────────┬───┬─────────────╮   ├─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┤   ╭─────────────┬───┬─────────────┬───┬─────────────┬───┼─────────────┤
                     &kp Z             &kp X             xxx               &kp V             &kp B                                           xxx               &kp H             xxx               xxx               xxx                  
//╰─────────────┴───┴─────────────┴───┴─────────────┴───┴─────────────╯   ╰─────────────╯   ╰─────────────╯                                 ╰─────────────╯   ╰─────────────╯   ╰─────────────┴───┴─────────────┴───┴─────────────┴───┴─────────────╯
//                                                                        ╭─────────────┬───┬─────────────╮ ╭─────────────────────────────╮ ╭─────────────┬───┬─────────────╮
                                                                           &lt NUM SPACE     &lt FOO C                                       &lt BAR N         &lt FUN M
//                                                                        ╰─────────────┴───┴─────────────╯ ╰─────────────────────────────╯ ╰─────────────┴───┴─────────────╯
//                                                                                       _x_                                                               _x_
)

//////////////////////////////
// NUM
//////////////////////////////

//      NAME        , TAP_ACT , TAP      , TAPTAP_ACT , TAPTAP
// TAP_TAP(n1          , kp      , N1       , kp         , F1       ) // 1 / F1
// TAP_TAP(n2          , kp      , N2       , kp         , F2       ) // 2 / F2
// TAP_TAP(n3          , kp      , N3       , kp         , F3       ) // 3 / F3
// TAP_TAP(n4          , kp      , N4       , kp         , F4       ) // 4 / F4
// TAP_TAP(n5          , kp      , N5       , kp         , F5       ) // 5 / F5
// TAP_TAP(n6          , kp      , N6       , kp         , F6       ) // 6 / F6
// TAP_TAP(n7          , kp      , N7       , kp         , F7       ) // 7 / F7
// TAP_TAP(n8          , kp      , N8       , kp         , F8       ) // 8 / F8
// TAP_TAP(n9          , kp      , N9       , kp         , F9       ) // 9 / F9
// TAP_TAP(n0          , kp      , N0       , kp         , F10      ) // 0 / F10
TAP_TAP(comma_semi  , kp      , COMMA    , kp         , SEMI     ) // , (б) / ; (ж)
TAP_TAP(dot_colon   , kp      , DOT      , kp         , COLON    ) // . (ю) / :
TAP_TAP(excl_qmark  , kp      , EXCL     , kp         , QMARK    ) // !     / ?
TAP_TAP(apos_aposs  , kp      , APOS     , kp         , LS(APOS) ) // ' (э) / "
TAP_TAP(minus_plus  , kp      , MINUS    , kp         , PLUS     ) // -     / +
TAP_TAP(fslh_star   , kp      , FSLH     , kp         , STAR     ) // /     / *
TAP_TAP(dllr_caret  , kp      , DLLR     , kp         , CARET    ) // $     / ^
TAP_TAP(amps_pipe   , kp      , AMPS     , kp         , PIPE     ) // &     / |
TAP_TAP(under_equal , kp      , UNDER    , kp         , EQUAL    ) // _     / =
TAP_TAP(tilde_grave , kp      , TILDE    , kp         , GRAVE    ) // ~     / `
TAP_TAP(bslh_at     , kp      , BSLH     , kp         , AT       ) // \ (ё) / @
TAP_TAP(hash_prcnt  , kp      , HASH     , kp         , PRCNT    ) // #     / %
TAP_TAP(lt_gt       , kp      , LT       , kp         , GT       ) // <     / >
TAP_TAP(lpar_rpar   , kp      , LPAR     , kp         , RPAR     ) // (     / )
TAP_TAP(lbkt_rbkt   , kp      , LBKT     , kp         , RBKT     ) // [ (х) / ] (ъ)
TAP_TAP(lbrc_rbrc   , kp      , LBRC     , kp         , RBRC     ) // {     / }

////////////////////
// combos
////////////////////

ZMK_COMBO(lt_gt        , &lt_gt             , LT3 LT2 , NUM , COMBO_TERM)
ZMK_COMBO(lpar_rpar    , &lpar_rpar         , LM3 LM2 , NUM , COMBO_TERM)
ZMK_COMBO(lbkt_rbkt    , &lbkt_rbkt         , RT2 RT3 , NUM , COMBO_TERM)
ZMK_COMBO(lbrc_rbrc    , &lbrc_rbrc         , RM2 RM3 , NUM , COMBO_TERM)

//////////

ZMK_COMBO(tilde_grave  , &tilde_grave       , LT3 LM3 , NUM , COMBO_TERM)
ZMK_COMBO(under_equal  , &under_equal       , LT2 LM2 , NUM , COMBO_TERM)
ZMK_COMBO(dllr_caret   , &dllr_caret        , RT2 RM2 , NUM , COMBO_TERM)
ZMK_COMBO(amps_pipe    , &amps_pipe         , RT3 RM3 , NUM , COMBO_TERM)

ZMK_COMBO(hash_prcnt   , &hash_prcnt        , LM1 LB1 , NUM , COMBO_TERM)
ZMK_COMBO(bslh_at      , &bslh_at           , RM1 RB1 , NUM , COMBO_TERM)

ZMK_COMBO(0            , &kp 0               , LH1 LH0 , DEF , COMBO_TERM)
ZMK_COMBO(0            , &kp 0               , RH0 RH1 , DEF , COMBO_TERM)

////////////////////

ZMK_LAYER(NUM,
//╭─────────────┬───┬─────────────╮   ╭─────────────┬───┬─────────────╮   ╭─────────────┬───┬─────────────╮                                 ╭─────────────┬───┬─────────────╮   ╭─────────────┬───┬─────────────╮   ╭─────────────┬───┬─────────────╮
                     xxx               &minus_plus       &fslh_star        xxx               xxx                                             xxx               xxx               &excl_qmark       &apos_aposs       xxx                  
//                                                  < / >                                                                                                                                 [ (х) / ] (ъ)  э
//├─────────────┼───┴─────────────╯   ├─────────────┼───┼─────────────┤   ╰─────────────┴───┼─────────────┤                                 ├─────────────┼───┴─────────────╯   ├─────────────┼───┼─────────────┤   ╰─────────────┴───┼─────────────┤
//                                         ~ / `             _ / =                                                                                                                   $ / ^             & / |
//├─────────────┤   ╭─────────────┬───┼─────────────┼───┼─────────────┼───┬─────────────╮   ├─────────────┤                                 ├─────────────┤   ╭─────────────┬───┼─────────────┼───┼─────────────┼───┬─────────────╮   ├─────────────┤
                     &hold_sk LGUI N1  &hold_sk LALT N2  &hold_sk LCTRL N3 &hold_sk LSHFT N4 xxx                                             xxx               &hold_sk LSHFT N7 &hold_sk LCTRL N8 &hold_sk LALT N9  &hold_sk LGUI N0     
//                                                  ( / )                                                                                                                                     { / }
//├─────────────┤   ╰─────────────┴───┴─────────────┴───┴─────────────┴───┼─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┼───┴─────────────┴───┴─────────────┴───┴─────────────╯   ├─────────────┤
//                                                                             # / %                                                                           \ (ё) / @
//├─────────────┼───┬─────────────┬───┬─────────────┬───┬─────────────╮   ├─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┤   ╭─────────────┬───┬─────────────┬───┬─────────────┬───┼─────────────┤
                     xxx               xxx               xxx               &kp N5            xxx                                             xxx               &kp N6            xxx               xxx               xxx                  
//╰─────────────┴───┴─────────────┴───┴─────────────┴───┴─────────────╯   ╰─────────────╯   ╰─────────────╯                                 ╰─────────────╯   ╰─────────────╯   ╰─────────────┴───┴─────────────┴───┴─────────────┴───┴─────────────╯
//                                                                        ╭─────────────┬───┬─────────────╮ ╭─────────────────────────────╮ ╭─────────────┬───┬─────────────╮
                                                                           ___               ___                                             &comma_semi       &dot_colon
//                                                                                                                                               б / ж               ю
//                                                                        ╰─────────────┴───┴─────────────╯ ╰─────────────────────────────╯ ╰─────────────┴───┴─────────────╯
//                                                                                       _x_                                                               _x_
)

//////////////////////////////
// FOO
//////////////////////////////

ZMK_LAYER(FOO,
//╭─────────────┬───┬─────────────╮   ╭─────────────┬───┬─────────────╮   ╭─────────────┬───┬─────────────╮                                 ╭─────────────┬───┬─────────────╮   ╭─────────────┬───┬─────────────╮   ╭─────────────┬───┬─────────────╮
                     xxx               _x_               _x_               xxx               xxx                                             xxx               xxx               _x_               _x_               xxx                  
//├─────────────┼───┴─────────────╯   ├─────────────┼───┼─────────────┤   ╰─────────────┴───┼─────────────┤                                 ├─────────────┼───┴─────────────╯   ├─────────────┼───┼─────────────┤   ╰─────────────┴───┼─────────────┤
//├─────────────┤   ╭─────────────┬───┼─────────────┼───┼─────────────┼───┬─────────────╮   ├─────────────┤                                 ├─────────────┤   ╭─────────────┬───┼─────────────┼───┼─────────────┼───┬─────────────╮   ├─────────────┤
                     _x_               _x_               _x_               _x_               xxx                                             xxx               _x_               _x_               _x_               _x_                  
//├─────────────┤   ╰─────────────┴───┴─────────────┴───┴─────────────┴───┼─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┼───┴─────────────┴───┴─────────────┴───┴─────────────╯   ├─────────────┤
//├─────────────┼───┬─────────────┬───┬─────────────┬───┬─────────────╮   ├─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┤   ╭─────────────┬───┬─────────────┬───┬─────────────┬───┼─────────────┤
                     xxx               xxx               xxx               _x_               xxx                                             xxx               _x_               xxx               xxx               xxx                  
//╰─────────────┴───┴─────────────┴───┴─────────────┴───┴─────────────╯   ╰─────────────╯   ╰─────────────╯                                 ╰─────────────╯   ╰─────────────╯   ╰─────────────┴───┴─────────────┴───┴─────────────┴───┴─────────────╯
//                                                                        ╭─────────────┬───┬─────────────╮ ╭─────────────────────────────╮ ╭─────────────┬───┬─────────────╮
                                                                           ___               ___                                             ___               ___
//                                                                        ╰─────────────┴───┴─────────────╯ ╰─────────────────────────────╯ ╰─────────────┴───┴─────────────╯
)

//////////////////////////////
// BAR
//////////////////////////////

ZMK_LAYER(BAR,
//╭─────────────┬───┬─────────────╮   ╭─────────────┬───┬─────────────╮   ╭─────────────┬───┬─────────────╮                                 ╭─────────────┬───┬─────────────╮   ╭─────────────┬───┬─────────────╮   ╭─────────────┬───┬─────────────╮
                     xxx               _x_               _x_               xxx               xxx                                             xxx               xxx               _x_               _x_               xxx                  
//├─────────────┼───┴─────────────╯   ├─────────────┼───┼─────────────┤   ╰─────────────┴───┼─────────────┤                                 ├─────────────┼───┴─────────────╯   ├─────────────┼───┼─────────────┤   ╰─────────────┴───┼─────────────┤
//├─────────────┤   ╭─────────────┬───┼─────────────┼───┼─────────────┼───┬─────────────╮   ├─────────────┤                                 ├─────────────┤   ╭─────────────┬───┼─────────────┼───┼─────────────┼───┬─────────────╮   ├─────────────┤
                     _x_               _x_               _x_               _x_               xxx                                             xxx               _x_               _x_               _x_               _x_                  
//├─────────────┤   ╰─────────────┴───┴─────────────┴───┴─────────────┴───┼─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┼───┴─────────────┴───┴─────────────┴───┴─────────────╯   ├─────────────┤
//├─────────────┼───┬─────────────┬───┬─────────────┬───┬─────────────╮   ├─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┤   ╭─────────────┬───┬─────────────┬───┬─────────────┬───┼─────────────┤
                     xxx               xxx               xxx               _x_               xxx                                             xxx               _x_               xxx               xxx               xxx                  
//╰─────────────┴───┴─────────────┴───┴─────────────┴───┴─────────────╯   ╰─────────────╯   ╰─────────────╯                                 ╰─────────────╯   ╰─────────────╯   ╰─────────────┴───┴─────────────┴───┴─────────────┴───┴─────────────╯
//                                                                        ╭─────────────┬───┬─────────────╮ ╭─────────────────────────────╮ ╭─────────────┬───┬─────────────╮
                                                                           ___               ___                                             ___               ___
//                                                                        ╰─────────────┴───┴─────────────╯ ╰─────────────────────────────╯ ╰─────────────┴───┴─────────────╯
)

//////////////////////////////
// FUN
//////////////////////////////

//      NAME        , TAP_ACT , TAP      , TAPTAP_ACT , TAPTAP
TAP_TAP(vol_prev_pp , kp      , C_PREV   , kp         , C_PP   )
TAP_TAP(vol_dn_mute , kp      , C_VOL_DN , kp         , C_MUTE )

TAP_TAP(left_home   , kp      , LEFT     , kp         , HOME   )
TAP_TAP(down_pg_dn  , kp      , DOWN     , kp         , PG_DN  )
TAP_TAP(up_pg_up    , kp      , UP       , kp         , PG_UP  )
TAP_TAP(right_end   , kp      , RIGHT    , kp         , END    )

// &kp DEL
// &kp RET2
// &caps_word
// &key_repeat

ZMK_LAYER(FUN,
//╭─────────────┬───┬─────────────╮   ╭─────────────┬───┬─────────────╮   ╭─────────────┬───┬─────────────╮                                 ╭─────────────┬───┬─────────────╮   ╭─────────────┬───┬─────────────╮   ╭─────────────┬───┬─────────────╮
                     xxx               &kp C_BRI_UP      &kp C_VOL_UP      xxx               xxx                                             xxx               xxx               _x_               _x_               xxx                  
//├─────────────┼───┴─────────────╯   ├─────────────┼───┼─────────────┤   ╰─────────────┴───┼─────────────┤                                 ├─────────────┼───┴─────────────╯   ├─────────────┼───┼─────────────┤   ╰─────────────┴───┼─────────────┤
//├─────────────┤   ╭─────────────┬───┼─────────────┼───┼─────────────┼───┬─────────────╮   ├─────────────┤                                 ├─────────────┤   ╭─────────────┬───┼─────────────┼───┼─────────────┼───┬─────────────╮   ├─────────────┤
                     _x_               &kp C_BRI_DN      &vol_dn_mute      &kp C_NEXT        xxx                                             xxx               &up_pg_up         &left_home        &right_end        &kp LG(LC(Q))        
//├─────────────┤   ╰─────────────┴───┴─────────────┴───┴─────────────┴───┼─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┼───┴─────────────┴───┴─────────────┴───┴─────────────╯   ├─────────────┤
//├─────────────┼───┬─────────────┬───┬─────────────┬───┬─────────────╮   ├─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┤   ╭─────────────┬───┬─────────────┬───┬─────────────┬───┼─────────────┤
                     xxx               xxx               xxx               &vol_prev_pp      xxx                                             xxx               &down_pg_dn       xxx               xxx               xxx                  
//╰─────────────┴───┴─────────────┴───┴─────────────┴───┴─────────────╯   ╰─────────────╯   ╰─────────────╯                                 ╰─────────────╯   ╰─────────────╯   ╰─────────────┴───┴─────────────┴───┴─────────────┴───┴─────────────╯
//                                                                        ╭─────────────┬───┬─────────────╮ ╭─────────────────────────────╮ ╭─────────────┬───┬─────────────╮
                                                                           ___               ___                                             ___               ___
//                                                                        ╰─────────────┴───┴─────────────╯ ╰─────────────────────────────╯ ╰─────────────┴───┴─────────────╯
)

//////////////////////////////
// BLU
//////////////////////////////

#if CONFIG_WIRELESS

#include <dt-bindings/zmk/bt.h>

ZMK_CONDITIONAL_LAYER(FOO BAR, BLU)

ZMK_LAYER(BLU,
//╭─────────────┬───┬─────────────╮   ╭─────────────┬───┬─────────────╮   ╭─────────────┬───┬─────────────╮                                 ╭─────────────┬───┬─────────────╮   ╭─────────────┬───┬─────────────╮   ╭─────────────┬───┬─────────────╮
                     xxx               &bt BT_CLR        &bootloader       xxx               xxx                                             xxx               xxx               &bootloader       &bt BT_CLR        xxx                  
//├─────────────┼───┴─────────────╯   ├─────────────┼───┼─────────────┤   ╰─────────────┴───┼─────────────┤                                 ├─────────────┼───┴─────────────╯   ├─────────────┼───┼─────────────┤   ╰─────────────┴───┼─────────────┤
//├─────────────┤   ╭─────────────┬───┼─────────────┼───┼─────────────┼───┬─────────────╮   ├─────────────┤                                 ├─────────────┤   ╭─────────────┬───┼─────────────┼───┼─────────────┼───┬─────────────╮   ├─────────────┤
                     &bt BT_SEL 1      &bt BT_SEL 2      &bt BT_SEL 3      &bt BT_SEL 4      xxx                                             xxx               &bt BT_SEL 7      &bt BT_SEL 8      &bt BT_SEL 9      &bt BT_SEL 0         
//├─────────────┤   ╰─────────────┴───┴─────────────┴───┴─────────────┴───┼─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┼───┴─────────────┴───┴─────────────┴───┴─────────────╯   ├─────────────┤
//├─────────────┼───┬─────────────┬───┬─────────────┬───┬─────────────╮   ├─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┤   ╭─────────────┬───┬─────────────┬───┬─────────────┬───┼─────────────┤
                     xxx               xxx               xxx               &bt BT_SEL 5      xxx                                             xxx               &bt BT_SEL 6      xxx               xxx               xxx                  
//╰─────────────┴───┴─────────────┴───┴─────────────┴───┴─────────────╯   ╰─────────────╯   ╰─────────────╯                                 ╰─────────────╯   ╰─────────────╯   ╰─────────────┴───┴─────────────┴───┴─────────────┴───┴─────────────╯
//                                                                        ╭─────────────┬───┬─────────────╮ ╭─────────────────────────────╮ ╭─────────────┬───┬─────────────╮
                                                                           ___               ___                                             ___               ___
//                                                                        ╰─────────────┴───┴─────────────╯ ╰─────────────────────────────╯ ╰─────────────┴───┴─────────────╯
)

#else

ZMK_LAYER(BLU,
//╭─────────────┬───┬─────────────╮   ╭─────────────┬───┬─────────────╮   ╭─────────────┬───┬─────────────╮                                 ╭─────────────┬───┬─────────────╮   ╭─────────────┬───┬─────────────╮   ╭─────────────┬───┬─────────────╮
                     xxx               &bt BT_CLR        &bootloader       xxx               xxx                                             xxx               xxx               &bootloader       &bt BT_CLR        xxx                  
//├─────────────┼───┴─────────────╯   ├─────────────┼───┼─────────────┤   ╰─────────────┴───┼─────────────┤                                 ├─────────────┼───┴─────────────╯   ├─────────────┼───┼─────────────┤   ╰─────────────┴───┼─────────────┤
//├─────────────┤   ╭─────────────┬───┼─────────────┼───┼─────────────┼───┬─────────────╮   ├─────────────┤                                 ├─────────────┤   ╭─────────────┬───┼─────────────┼───┼─────────────┼───┬─────────────╮   ├─────────────┤
                     _x_               _x_               _x_               _x_               xxx                                             xxx               _x_               _x_               _x_               _x_                  
//├─────────────┤   ╰─────────────┴───┴─────────────┴───┴─────────────┴───┼─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┼───┴─────────────┴───┴─────────────┴───┴─────────────╯   ├─────────────┤
//├─────────────┼───┬─────────────┬───┬─────────────┬───┬─────────────╮   ├─────────────┤   ├─────────────┤                                 ├─────────────┤   ├─────────────┤   ╭─────────────┬───┬─────────────┬───┬─────────────┬───┼─────────────┤
                     xxx               xxx               xxx               _x_               xxx                                             xxx               _x_               xxx               xxx               xxx                  
//╰─────────────┴───┴─────────────┴───┴─────────────┴───┴─────────────╯   ╰─────────────╯   ╰─────────────╯                                 ╰─────────────╯   ╰─────────────╯   ╰─────────────┴───┴─────────────┴───┴─────────────┴───┴─────────────╯
//                                                                        ╭─────────────┬───┬─────────────╮ ╭─────────────────────────────╮ ╭─────────────┬───┬─────────────╮
                                                                           ___               ___                                             ___               ___
//                                                                        ╰─────────────┴───┴─────────────╯ ╰─────────────────────────────╯ ╰─────────────┴───┴─────────────╯
)

#endif
